#!/usr/bin/env python3
import os
import subprocess

# Define DWM Color Scheme Elements without prepopulated colors
ELEMENT_COLORS = [
    ("selected_tag", {
        "norm": ["dwm.tagsselbgcolor"],
        "font": ["dwm.tagsselfgcolor"]
    }),
    ("unselected_tag", {
        "norm": ["dwm.tagsnormbgcolor"],
        "font": ["dwm.tagsnormfgcolor"]
    }),
    ("displaymode_status", {
        "norm": ["dwm.normbgcolor"],
        "font": ["dwm.normfgcolor"]
    }),
    ("titlebar", {
        "norm": ["dwm.titlenormbgcolor", "dwm.titleselbgcolor"],
        "font": ["dwm.titleselfgcolor"]
    }),
    ("unselected_window_border", {
        "norm": ["dwm.normfloatcolor"],
        "font": []
    }),
    ("selected_window_border", {
        "norm": ["dwm.selbordercolor", "dwm.selfloatcolor"],
        "font": []
    }),
]

def run_command(command):
    """Run a shell command and return its output."""
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, text=True)
    return result.stdout.strip()


# def get_contrast_color(hex_color):
#     """Given a hex color, return either black or white for optimal contrast."""
#     r = int(hex_color[1:3], 16)
#     g = int(hex_color[3:5], 16)
#     b = int(hex_color[5:7], 16)
#     luminance = (r * 0.299 + g * 0.587 + b * 0.114)
#     return "#000000" if luminance > 186 else "#ffffff"

def get_contrast_color(hex_color):
    r = int(hex_color[1:3], 16)
    g = int(hex_color[3:5], 16)
    b = int(hex_color[5:7], 16)
    
    def linearize(c):
        c = c / 255.0
        if c <= 0.04045:
            return c / 12.92
        else:
            return ((c + 0.055) / 1.055) ** 2.4
    
    r = linearize(r)
    g = linearize(g)
    b = linearize(b)
    
    L = 0.2126 * r + 0.7152 * g + 0.0722 * b

    if L > 0.179:
        return "#000000"
    else:
        return "#ffffff"

def fetch_wallpaper_colors(element_count, wallpaper_path):
    """Fetch color scheme from Okolors for the specified wallpaper."""
    color_command = "okolors -k " + str(element_count) + " " + wallpaper_path
    colors = run_command(color_command).split()
    return ["#" + color for color in colors]


def main():
    # Determine paths
    
    # Fetch current wallpaper path
    #set wallpaper path to $XDG_RUNTIME_DIR/wallsync-dwm/current_wallpaper. Although if $XDG_RUNTIME_DIR is not set, set it to /run/user/$(id -u)/wallsync-dwm/current_wallpaper
    XDG_RUNTIME_DIR = os.path.join(os.environ.get("XDG_RUNTIME_DIR", "/run/user/" + str(os.getuid())), "wallsync-dwm")
    wallpaper_path = run_command("cat " + os.path.join(XDG_RUNTIME_DIR, "current_wallpaper"))
    cropped_wallpaper_path = os.path.join(XDG_RUNTIME_DIR, "cropped_wallpaper.jpg")
    
    # Fetch colors for elements and average color for borders
    element_colors = fetch_wallpaper_colors(len(ELEMENT_COLORS), wallpaper_path)
    avg_color = fetch_wallpaper_colors(1, cropped_wallpaper_path)[0]

    # Construct configuration output
    config_output = []
    for i, (zone, color_dicts) in enumerate(ELEMENT_COLORS):
        current_color = element_colors[i]
        # Assign colors for "norm" background elements
        for colorkey in color_dicts["norm"]:
            config_output.append(colorkey + ": " + current_color)
        # Assign contrasting colors for "font" elements
        for colorkey in color_dicts["font"]:
            config_output.append(colorkey + ": " + get_contrast_color(current_color))

    # Add border color configuration
    config_output.append("dwm.normbordercolor: " + get_contrast_color(avg_color))

    # Output the configuration
    print("\n".join(config_output))


if __name__ == "__main__":
    main()
